# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/app_file_service/backup.gni")

ohos_unittest("b_file_info_test") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  module_out_path = path_module_out_tests

  sources = [
    "${path_backup}/frameworks/native/backup_kit_inner/src/b_file_info.cpp",
    "b_file_info_test.cpp",
  ]
  sources += backup_mock_parcel_src

  include_dirs =
      [ "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl" ]
  include_dirs += backup_mock_parcel_include_dirs

  deps = [
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
  ]

  external_deps = [ "hilog:libhilog" ]

  use_exceptions = true
}

ohos_unittest("backup_sa_impl_test") {
  branch_protector_ret = "pac_ret"

  module_out_path = path_module_out_tests

  sources = [
    "${path_backup_mock}/system_ability_manager/service_registry_mock.cpp",
    "${path_backup_mock}/utils_mock/src/utils_mock_global_variable.cpp",
    "service_proxy_test.cpp",
    "service_reverse_stub_test.cpp",
    "service_reverse_test.cpp",
    "svc_death_recipient_test.cpp",
  ]

  include_dirs = [
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/frameworks/native/backup_kit_inner/include",
    "${path_backup}/tests/unittests/backup_api/backup_impl/include",
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
  ]
  include_dirs += backup_mock_utils_include

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
    "${path_googletest}:gmock_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "samgr:samgr_proxy",
  ]

  sanitize = {
    integer_overflow = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "${path_backup}/cfi_blocklist.txt"
  }

  use_exceptions = true
}

group("backup_impl_test") {
  testonly = true

  deps = [
    ":b_file_info_test",
    ":backup_sa_impl_test",
  ]
}
