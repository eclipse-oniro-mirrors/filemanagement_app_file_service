# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/app_file_service/backup.gni")

ohos_unittest("module_ipc_test") {
  module_out_path = path_module_out_tests

  sources = [
    "service_reverse_proxy_test.cpp",
    "service_stub_test.cpp",
    "svc_backup_connection_test.cpp",
    "svc_extension_proxy_test.cpp",
  ]

  include_dirs = [
    "${path_backup}/services/backup_sa/include",
    "${path_base}/include",
    "${path_backup}/tests/unittests/backup_api/backup_impl/include",
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/services/backup_sa:backup_sa",
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  use_exceptions = true
}

ohos_unittest("backup_service_test") {
  module_out_path = path_module_out_tests

  sources = [
    "${path_backup_mock}/accesstoken/accesstoken_kit_mock.cpp",
    "${path_backup}/services/backup_sa/src/module_ipc/service.cpp",
    "service_test.cpp",
  ]
  sources += backup_mock_src
  sources += backup_mock_session_manager_src
  sources += backup_mock_scheduler_src
  sources += backup_mock_module_external_src

  include_dirs = [
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
    "${path_backup}/tests/unittests/backup_api/backup_impl/include",
    "${path_access_token}/interfaces/innerkits/accesstoken/include",
    "${path_backup_mock}/b_process/",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
    "${path_googletest}:gmock_main",
    "${path_jsoncpp}:jsoncpp",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  use_exceptions = true
}

ohos_unittest("backup_service_session_test") {
  module_out_path = path_module_out_tests

  sources = [
    "${path_backup_mock}/affwk/service_registry_mock.cpp",
    "${path_backup_mock}/bundle_manager/src/mock_bundle_manager.cpp",
    "${path_backup}/services/backup_sa/src/module_ipc/svc_session_manager.cpp",
    "svc_session_manager_test.cpp",
  ]
  sources += backup_mock_src
  sources += backup_mock_scheduler_src
  sources += backup_mock_service_src
  sources += backup_mock_module_external_src

  include_dirs = [
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
    "${path_backup}/tests/unittests/backup_api/backup_impl/include",
    "${path_base}/include",
    "${path_backup_mock}/bundle_manager/include",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
    "${path_googletest}:gmock_main",
    "${path_jsoncpp}:jsoncpp",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "safwk:dynamic_cache",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  use_exceptions = true
}

ohos_unittest("backup_service_scheduler_test") {
  module_out_path = path_module_out_tests

  sources = [
    "${path_backup_mock}/timer/timer_mock.cpp",
    "${path_backup}/services/backup_sa/src/module_sched/sched_scheduler.cpp",
    "sched_scheduler_test.cpp",
  ]
  sources += backup_mock_src
  sources += backup_mock_service_src
  sources += backup_mock_session_manager_src
  sources += backup_mock_module_external_src

  include_dirs = [
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
    "${path_backup}/tests/unittests/backup_api/backup_impl/include",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/tests/utils:backup_test_utils",
    "${path_backup}/utils:backup_utils",
    "${path_googletest}:gmock_main",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  use_exceptions = true
}

group("backup_sa_ipc_test") {
  testonly = true
  deps = [
    ":backup_service_scheduler_test",
    ":backup_service_session_test",
    ":backup_service_test",
    ":module_ipc_test",
  ]
}
