# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/filemanagement/app_file_service/backup.gni")

ohos_unittest("bms_adapter_test") {
  module_out_path = path_module_out_tests

  include_dirs = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/utils/include",
    "${path_backup}/utils/include/b_hilog",
    "${path_backup_mock}/utils_mock/include",
  ]

  sources = [
    "${path_backup_mock}/utils_mock/src/b_jsonutil_mock.cpp",
    "${path_backup_mock}/utils_mock/src/b_sa_utils_mock.cpp",
    "bms_adapter_test.cpp",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/services/backup_sa:backup_sa",
  ]

  defines = [
    "LOG_TAG=\"app_file_service\"",
    "LOG_DOMAIN=0xD200000",
    "private = public",
    "protected = public",
  ]

  external_deps = [
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:dynamic_cache",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
  ]

  use_exceptions = true
}

ohos_unittest("storage_manager_service_test") {
  module_out_path = path_module_out_tests

  include_dirs = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner/impl",
    "${path_backup}/services/backup_sa/include",
    "${path_backup}/services/backup_sa/src",
    "${path_backup}/utils/include",
    "${path_backup}/utils/include/b_hilog",
    "${path_backup_mock}/utils_mock/include",
    "${path_backup_mock}/module_external/include",
  ]

  sources = [
    "${path_backup_mock}/utils_mock/src/b_jsonutil_mock.cpp",
    "${path_backup_mock}/utils_mock/src/b_sa_utils_mock.cpp",
    "${path_backup_mock}/module_external/src/datashare_helper_mock.cpp",
    "${path_backup_mock}/module_external/src/datashare_result_set_mock .cpp",
    "storage_manager_service_test.cpp",
  ]

  deps = [
    "${path_backup}/interfaces/inner_api/native/backup_kit_inner:backup_kit_inner",
    "${path_backup}/utils:backup_utils",
    "${path_backup}/interfaces/innerkits/native:sandbox_helper_native",
    "${path_backup}/interfaces/innerkits/native:fileuri_native",
    "${path_backup}/services/backup_sa:backup_sa"
  ]

  defines = [
    "LOG_TAG=\"app_file_service\"",
    "LOG_DOMAIN=0xD04303",
    "private = public",
    "protected = public",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "init:libbegetutil",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "storage_service:storage_manager_sa_proxy",
    "data_share:datashare_consumer",
    "data_share:datashare_common",
    "googletest:gmock_main",
    "googletest:gtest_main",
  ]

  use_exceptions = true
}

group("adapter_test") {
  testonly = true
  deps = [
    ":bms_adapter_test",
    ":storage_manager_service_test" ]
}
