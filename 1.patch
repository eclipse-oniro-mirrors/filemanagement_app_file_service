diff --git a/afs_change.patch b/afs_change.patch
new file mode 100644
index 00000000..e69de29b
diff --git a/bundle.json b/bundle.json
index e8b3be68..3355df8c 100644
--- a/bundle.json
+++ b/bundle.json
@@ -72,7 +72,9 @@
                     "//foundation/filemanagement/app_file_service/interfaces/kits/ani/file_uri:fileuri_ani_package",
                     "//foundation/filemanagement/app_file_service/interfaces/kits/ndk/fileuri/src:ohfileuri",
                     "//foundation/filemanagement/app_file_service/interfaces/kits/ndk/fileshare/src:ohfileshare",
-                    "//foundation/filemanagement/app_file_service/frameworks/native/backup_ext/ani:backup_ext_ani_package"
+                    "//foundation/filemanagement/app_file_service/frameworks/native/backup_ext/ani:backup_ext_ani_package",
+                    "//foundation/filemanagement/app_file_service/interfaces/kits/taihe/fileuri:afs_fileuri_taihe",
+                    "//foundation/filemanagement/app_file_service/interfaces/kits/taihe/fileshare:afs_fileshare_taihe"
                 ],
                 "service_group": [
                     "//foundation/filemanagement/app_file_service:tgt_backup_extension",
diff --git a/interfaces/kits/taihe/fileshare/BUILD.gn b/interfaces/kits/taihe/fileshare/BUILD.gn
new file mode 100644
index 00000000..5bd9cf04
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/BUILD.gn
@@ -0,0 +1,86 @@
+import("//build/config/components/ets_frontend/ets2abc_config.gni")
+import("//build/ohos.gni")
+import("//build/ohos/taihe_idl/taihe.gni")
+import("//foundation/filemanagement/app_file_service/app_file_service.gni")
+
+part_name = "app_file_service"
+subsystem_name = "filemanagement"
+taihe_generated_file_path = "$taihe_file_path/out/$subsystem_name/$part_name/fileshare"
+
+copy_taihe_idl("copy_taihe") {
+  sources = [ "${app_file_service_path}/interfaces/kits/taihe/fileshare/idl/ohos.fileshare.taihe" ]
+}
+
+ohos_taihe("run_taihe") {
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  deps = [ ":copy_taihe" ]
+  outputs = [
+    "$taihe_generated_file_path/src/ohos.fileshare.ani.cpp",
+    "$taihe_generated_file_path/src/ohos.fileshare.abi.c",
+  ]
+}
+
+taihe_shared_library("file_share_taihe") {
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  subsystem_name = "filemanagement"
+  part_name = "app_file_service"
+
+  include_dirs = [
+    "include",
+    "${app_file_service_path}/interfaces/common/include/log.h",
+    "${app_file_service_path}/interfaces/innerkits/native/file_share/include",
+    "${app_file_service_path}/interfaces/kits/ndk/fileshare/include"
+  ]
+
+  sources = get_target_outputs(":run_taihe")
+  sources += [
+    "src/ani_constructor.cpp",
+    "src/grant_permissons.cpp"
+  ]
+
+  deps = [
+    ":run_taihe",
+    "${app_file_service_path}/interfaces/innerkits/native:fileshare_native",
+  ]
+
+  external_deps = [
+    "hilog:libhilog",
+    "hitrace:hitrace_meter",
+  ]
+}
+
+generate_static_abc("file_share_taihe_abc") {
+    base_url = "$taihe_generated_file_path"
+    files = [ "$taihe_generated_file_path/@ohos.fileshare.ets" ]
+    is_boot_abc = "True"
+    device_dst_file = "/system/framework/file_share_taihe_abc.abc"
+    dependencies = [ ":run_taihe" ]
+}
+
+generate_static_abc("file_share_taihe_test_abc"){
+    base_url = "${app_file_service_path}/interfaces/kits/taihe/fileshare/test"
+    files=[
+      "${app_file_service_path}/interfaces/kits/taihe/fileshare/test/test_activatePermission.ets",
+      "${app_file_service_path}/interfaces/kits/taihe/fileshare/test/test_deactivatePermission.ets",
+      "${app_file_service_path}/interfaces/kits/taihe/fileshare/test/test_main.ets",
+    ]
+    is_boot_abc = "True"
+    device_dst_file = "/system/framework/file_share_taihe_test_abc.abc"
+}
+
+ohos_prebuilt_etc("file_share_etc") {
+  source = "$target_out_dir/file_share_taihe_abc.abc"
+  module_install_dir = "framework"
+  part_name = "app_file_service"
+  subsystem_name = "filemanagement"
+  deps = [
+    ":file_share_taihe_abc",
+  ]
+}
+
+group("afs_fileshare_taihe") {
+  deps = [
+    ":file_share_taihe",
+    ":file_share_etc",
+  ]
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/idl/ohos.fileshare.taihe b/interfaces/kits/taihe/fileshare/idl/ohos.fileshare.taihe
new file mode 100644
index 00000000..10e28d00
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/idl/ohos.fileshare.taihe
@@ -0,0 +1,35 @@
+@!namespace("@ohos.fileshare","fileShare")
+
+@!sts_inject("""
+static { loadLibrary("file_share_taihe.z"); }
+""")
+
+enum OperationMode:i32{
+    READ_MODE=1,
+    WRITE_MODE=2,
+}
+
+struct PolicyInfo{
+    uri:String;
+    operationMode:i32;
+}
+
+function makePolicyInfo(uri:String,operationMode:i32): PolicyInfo;
+
+enum PolicyErrorCode:i32{
+    PERSISTENCE_FORBIDDEN = 1,
+    INVALID_MODE = 2,
+    INVALID_PATH = 3,
+    PERMISSION_NOT_PERSISTED = 4,
+}
+
+@gen_promise("activatePermission")
+function activatePermissionSync(
+    policies: Array<PolicyInfo>
+): void;
+
+
+@gen_promise("deactivatePermission")
+function deactivatePermissionSync(
+    policies: Array<PolicyInfo>
+): void;
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/include/grant_permissons.h b/interfaces/kits/taihe/fileshare/include/grant_permissons.h
new file mode 100644
index 00000000..3c9e8581
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/include/grant_permissons.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ #ifndef FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_GRANT_PERMISSONS_H
+ #define FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_GRANT_PERMISSONS_H
+
+#include "ohos.fileshare.proj.hpp"
+#include "ohos.fileshare.impl.hpp"
+#include "taihe/runtime.hpp"
+#include "file_permission.h"
+
+namespace ANI::fileShare {
+using namespace taihe;
+using namespace ohos::fileshare;
+
+    PolicyInfo makePolicyInfo(string_view uri, int32_t operationMode);
+    void activatePermissionSync(array_view<PolicyInfo> policies);
+    void deactivatePermissionSync(array_view<PolicyInfo> policies);
+
+    struct PolicyErrorArgs {
+        std::deque<OHOS::AppFileService::PolicyErrorResult> errorResults;
+        int32_t errNo = 0;
+        ~PolicyErrorArgs() = default;
+    };
+
+}  // namespace 
+
+#endif // FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_GRANT_PERMISSONS_H
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/src/ani_constructor.cpp b/interfaces/kits/taihe/fileshare/src/ani_constructor.cpp
new file mode 100644
index 00000000..1571fe27
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/src/ani_constructor.cpp
@@ -0,0 +1,32 @@
+ /*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_ANI_CONSTRUCTOR_H
+#define FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_ANI_CONSTRUCTOR_H
+
+#include "ohos.fileshare.ani.hpp"
+ANI_EXPORT ani_status ANI_Constructor(ani_vm *vm, uint32_t *result) {
+    ani_env *env;
+    if (ANI_OK != vm->GetEnv(ANI_VERSION_1, &env)) {
+        return ANI_ERROR;
+    }
+    if (ANI_OK != ohos::fileshare::ANIRegister(env)) {
+        std::cerr << "Error from ohos::fileshare::ANIRegister" << std::endl;
+        return ANI_ERROR;
+    }
+    *result = ANI_VERSION_1;
+    return ANI_OK;
+}
+
+#endif // FILEMANAGEMENT_APP_FILE_SERVICE_INTERFACES_FILE_SHARE_TAIHE_ANI_CONSTRUCTOR_H
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/src/grant_permissons.cpp b/interfaces/kits/taihe/fileshare/src/grant_permissons.cpp
new file mode 100644
index 00000000..84702f67
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/src/grant_permissons.cpp
@@ -0,0 +1,108 @@
+ /*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+ #include "grant_permissons.h"
+ #include "log.h"
+ #include "oh_file_share.h"
+ #include <iostream>
+ 
+ 
+ using namespace taihe;
+ using namespace ANI::fileShare;
+ 
+ namespace ANI::fileShare {
+ 
+ PolicyInfo makePolicyInfo(string_view uri, int32_t operationMode) 
+ {
+     return PolicyInfo{uri, operationMode};
+ }
+ 
+ int32_t GetUriPoliciesArg(array_view<PolicyInfo> policies,
+     std::vector<OHOS::AppFileService::UriPolicyInfo> &uriPolicies)
+ {
+     uint32_t count = policies.size(); 
+ 
+     if (count > OHOS::AppFileService::MAX_ARRAY_SIZE) {
+         LOGE("The length of the array is extra-long");
+         return E_PARAMS;
+     }
+     
+     for(uint32_t i = 0; i < count; i++) {
+         OHOS::AppFileService::UriPolicyInfo uriPolicy;
+         uriPolicy.uri = policies[i].uri;
+         uriPolicy.mode = policies[i].operationMode;
+         if(uriPolicy.uri == "") {
+             LOGE("URI is empty");
+             return E_PARAMS;
+         }
+         if(uriPolicy.mode != READ_MODE && 
+             uriPolicy.mode != (READ_MODE | WRITE_MODE)) {
+             LOGE("Invalid operation mode");
+             return E_PARAMS;
+         }
+         uriPolicies.emplace_back(uriPolicy);
+     }
+     return E_NO_ERROR;
+ }
+ 
+ void activatePermissionSync(array_view<PolicyInfo> policies) 
+ {
+     std::vector<OHOS::AppFileService::UriPolicyInfo> uriPolicies;
+     if(GetUriPoliciesArg(policies , uriPolicies)) {
+         LOGE("Failed to get URI policies");
+         set_business_error(E_PARAMS, "Failed to get URI policies");
+     }
+ 
+     std::shared_ptr<PolicyErrorArgs> arg = std::make_shared<PolicyErrorArgs>();
+     if (arg == nullptr) {
+         LOGE("PolicyErrorArgs make make_shared failed");
+         set_business_error(E_UNKNOWN_ERROR, "PolicyErrorArgs make make_shared failed");
+     }
+ 
+     arg->errNo=OHOS::AppFileService::FilePermission::ActivatePermission(uriPolicies, arg->errorResults);
+     if(arg->errNo) {
+         LOGE("Activation failed" );
+         set_business_error(arg->errNo, "Activation failed");
+     }
+ }
+ 
+ void deactivatePermissionSync(array_view<PolicyInfo> policies) 
+ {
+     std::vector<OHOS::AppFileService::UriPolicyInfo> uriPolicies;
+     if(GetUriPoliciesArg(policies, uriPolicies)) {
+         LOGE("Failed to get URI policies");
+         set_business_error(E_PARAMS, "Failed to get URI policies");
+     }
+ 
+     std::shared_ptr<PolicyErrorArgs> arg = std::make_shared<PolicyErrorArgs>();
+     if (arg == nullptr) {
+         LOGE("PolicyErrorArgs make make_shared failed");
+         set_business_error(E_UNKNOWN_ERROR, "PolicyErrorArgs make make_shared failed");
+     }
+ 
+     arg->errNo=OHOS::AppFileService::FilePermission::DeactivatePermission(uriPolicies, arg->errorResults);
+     if(arg->errNo) {
+         LOGE("Deactivation failed");
+         set_business_error(arg->errNo, "Deactivation failed");
+     }
+ }
+ }  // namespace
+ 
+ // NOLINTBEGIN
+ TH_EXPORT_CPP_API_makePolicyInfo(makePolicyInfo);
+ TH_EXPORT_CPP_API_activatePermissionSync(activatePermissionSync);
+ TH_EXPORT_CPP_API_deactivatePermissionSync(deactivatePermissionSync);
+ // NOLINTEND
+ 
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/test/test_activatePermission.ets b/interfaces/kits/taihe/fileshare/test/test_activatePermission.ets
new file mode 100644
index 00000000..0641dee7
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/test/test_activatePermission.ets
@@ -0,0 +1,109 @@
+import fileShare from '@ohos.fileshare';
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_ActivatePermission_0100
+* @tc.name FileShare_activatePermission_001
+* @tc.desc Test activatePermission() interfaces
+* Test normal uri and OperationMode is READ_MODE.
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 0
+* @tc.require
+*/
+function FileShare_activatePermission_001()
+{
+    let fileStr = "/data/storage/el2/base/haps/entry/files/FileShare_activatePermission_001.txt";
+    let uri = fileStr;
+    let policyInfo : fileShare.PolicyInfo = {
+        uri: uri, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+    let policies = [policyInfo];
+
+    fileShare.activatePermission(policies).then(() => {
+        console.log("FileShare_activatePermission_001 successfully");
+    }).catch((err) => {
+        console.log("FileShare_activatePermission_001 failed with error message: " + err.message + ", error code: " + err.code);
+    });
+
+}
+
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_ActivatePermission_0200
+* @tc.name FileShare_activatePermission_002
+* @tc.desc Test activatePermission() interfaces
+* Test normal uri and OperationMode is READ_MODE and WRITE_MODE .
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 0
+* @tc.require
+*/
+function FileShare_activatePermission_002()
+{
+
+    let fileStr = "/data/storage/el2/base/haps/entry/files/FileShare_activatePermission_002.txt";
+    let uri = fileStr;
+    let policyInfo: fileShare.PolicyInfo ={
+        uri: uri, 
+        operationMode: fileShare.OperationMode.READ_MODE | fileShare.OperationMode.WRITE_MODE,
+    };
+    let policies = [policyInfo];
+
+    fileShare.activatePermission(policies).then(() => {
+        console.info("FileShare_activatePermission_002 successfully");
+    }).catch((err) => {
+        console.info("FileShare_activatePermission_002 failed with error message: " + err.message + ", error code: " + err.code);
+    });
+}
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_ActivatePermission_0300
+* @tc.name FileShare_activatePermission_003
+* @tc.desc Test activatePermission() interfaces
+* Test INVALID_PATH uri and OperationMode is READ_MODE.
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 3
+* @tc.require
+*/
+function FileShare_activatePermission_003()
+{
+
+    let fileStr1 = "/data/storage/el2/base/haps/entry/files/FileShare_activatePermission_003.txt";
+    let uri1 = fileStr1;
+    let policyInfo1 : fileShare.PolicyInfo = {
+        uri: uri1, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+
+    let fileStr2 = "/data/storage/el2/base/haps/entry/files/FileShare_activatePermission_00301.txt";
+    let uri2 = fileStr2;
+    let policyInfo2 : fileShare.PolicyInfo = {
+        uri: uri2, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+    let policies = [policyInfo1, policyInfo2];
+
+    fileShare.activatePermission(policies).then(() => {
+        console.info("FileShare_activatePermission_003 successfully");
+    }).catch((err) => {
+        console.info("FileShare_activatePermission_003 failed with error message: " + err.message + ", error code: " + err.code);
+    });
+
+}
+
+export function testActivatePermission()
+{
+    console.log("FileShare_activatePermission_001 test begin");
+    FileShare_activatePermission_001();
+    console.log("FileShare_activatePermission_001 test end");
+
+    console.log("FileShare_activatePermission_002 test begin");
+    FileShare_activatePermission_002();
+    console.log("FileShare_activatePermission_002 test end");
+
+    console.log("FileShare_activatePermission_003 test begin");
+    FileShare_activatePermission_003();
+    console.log("FileShare_activatePermission_003 test end");
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/test/test_deactivatePermission.ets b/interfaces/kits/taihe/fileshare/test/test_deactivatePermission.ets
new file mode 100644
index 00000000..7320526c
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/test/test_deactivatePermission.ets
@@ -0,0 +1,108 @@
+import fileShare from '@ohos.fileshare';
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_DeactivatePermission_0100
+* @tc.name FileShare_deactivatePermission_001
+* @tc.desc Test deactivatePermission() interfaces
+* Test normal uri and OperationMode is READ_MODE.
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 0
+* @tc.require
+*/
+function FileShare_deactivatePermission_001()
+{
+    let fileStr = "/data/storage/el2/base/haps/entry/files/FileShare_deactivatePermission_001.txt";
+    let uri = fileStr;
+    let policyInfo : fileShare.PolicyInfo = {
+        uri: uri, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+    let policies = [policyInfo];
+
+    fileShare.deactivatePermission(policies).then(() => {
+        console.log("FileShare_deactivatePermission_001 successfully");
+
+    }).catch((err) => {
+        console.log("FileShare_deactivatePermission_001 failed with error message " + err.message + ", error code: " + err.code);
+
+    });
+
+}
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_DeactivatePermission_0200
+* @tc.name FileShare_deactivatePermission_002
+* @tc.desc Test deactivatePermission() interfaces
+* Test normal uri and OperationMode is READ_MODE and WRITE_MODE .
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 0
+* @tc.require
+*/
+function FileShare_deactivatePermission_002()
+{
+    let fileStr = "/data/storage/el2/base/haps/entry/files/FileShare_deactivatePermission_002.txt";
+    let uri = fileStr;
+    let policyInfo: fileShare.PolicyInfo ={
+        uri: uri, 
+        operationMode: fileShare.OperationMode.READ_MODE | fileShare.OperationMode.WRITE_MODE,
+    };
+    let policies = [policyInfo];
+
+    fileShare.deactivatePermission(policies).then(() => {
+        console.log("FileShare_deactivatePermission_002 successfully");
+    }).catch((err) => {
+        console.log("FileShare_deactivatePermission_002 failed with error message " + err.message + ", error code: " + err.code);
+    });
+}
+
+/**
+* @tc.number SUB_BASIC_FM_FileAPI_FileShare_DeactivatePermission_0300
+* @tc.name FileShare_deactivatePermission_003
+* @tc.desc Test deactivatePermission() interfaces
+* Test INVALID_PATH uri and OperationMode is READ_MODE.
+* @tc.size MEDIUM
+* @tc.type Function
+* @tc.level Level 3
+* @tc.require
+*/
+function FileShare_deactivatePermission_003()
+{
+    let fileStr1 = "/data/storage/el2/base/haps/entry/files/FileShare_deactivatePermission_003.txt";
+    let uri1 = fileStr1 ;
+    let policyInfo1 : fileShare.PolicyInfo= {
+        uri: uri1, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+
+    let fileStr2 = "/data/storage/el2/base/haps/entry/files/FileShare_deactivatePermission_00301.txt";
+    let uri2 = fileStr2;
+    let policyInfo2 : fileShare.PolicyInfo = {
+        uri: uri2, 
+        operationMode: fileShare.OperationMode.READ_MODE,
+    };
+    let policies = [policyInfo1, policyInfo2];
+
+    fileShare.deactivatePermission(policies).then(() => {
+        console.log("FileShare_deactivatePermission_003 successfully");
+    }).catch((err) => {
+        console.info("FileShare_deactivatePermission_003 failed with error message: " + err.message + ", error code: " + err.code);
+    });
+
+}
+
+export function testDeactivatePermission()
+{
+    console.log("FileShare_deactivatePermission_001 test begin");
+    FileShare_deactivatePermission_001();
+    console.log("FileShare_deactivatePermission_001 test end");
+
+    console.log("FileShare_deactivatePermission_002 test begin");
+    FileShare_deactivatePermission_002();
+    console.log("FileShare_deactivatePermission_002 test end");
+
+    console.log("FileShare_deactivatePermission_003 test begin");
+    FileShare_deactivatePermission_003();
+    console.log("FileShare_deactivatePermission_003 test end");
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileshare/test/test_main.ets b/interfaces/kits/taihe/fileshare/test/test_main.ets
new file mode 100644
index 00000000..a6076e0e
--- /dev/null
+++ b/interfaces/kits/taihe/fileshare/test/test_main.ets
@@ -0,0 +1,11 @@
+import {testActivatePermission} from "./test_activatePermission";
+import {testDeactivatePermission} from "./test_deactivatePermission";
+
+
+
+function main(){
+    
+    testActivatePermission();
+    testDeactivatePermission();
+
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/BUILD.gn b/interfaces/kits/taihe/fileuri/BUILD.gn
new file mode 100644
index 00000000..5f655dd9
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/BUILD.gn
@@ -0,0 +1,85 @@
+import("//build/config/components/ets_frontend/ets2abc_config.gni")
+import("//build/ohos.gni")
+import("//build/ohos/taihe_idl/taihe.gni")
+import("//foundation/filemanagement/app_file_service/app_file_service.gni")
+
+part_name = "app_file_service"
+subsystem_name = "filemanagement"
+taihe_generated_file_path = "$taihe_file_path/out/$subsystem_name/$part_name/fileuri"
+
+copy_taihe_idl("copy_taihe") {
+  sources = [ "${app_file_service_path}/interfaces/kits/taihe/fileuri/idl/ohos.file.fileuri.taihe" ]
+}
+
+ohos_taihe("run_taihe") {
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  deps = [ ":copy_taihe" ]
+  outputs = [
+    "$taihe_generated_file_path/src/ohos.file.fileuri.ani.cpp",
+    "$taihe_generated_file_path/src/ohos.file.fileuri.abi.c",
+  ]
+}
+
+taihe_shared_library("file_fileuri_taihe") {
+  taihe_generated_file_path = "$taihe_generated_file_path"
+  subsystem_name = "$subsystem_name"
+  part_name = "$part_name"
+
+  include_dirs = [
+    "include",
+    "${app_file_service_path}/interfaces/common/include",
+    "${app_file_service_path}/interfaces/common/include/log.h",
+    "${app_file_service_path}/interfaces/innerkits/native/file_uri/include",
+    "${app_file_service_path}/interfaces/kits/ndk/fileshare/include"
+  ]
+
+  sources = get_target_outputs(":run_taihe")
+  sources += [
+    "src/ani_constructor.cpp",
+    "src/fileuri_taihe.cpp"
+  ]
+
+  deps = [
+    ":run_taihe",
+    "${app_file_service_path}/interfaces/innerkits/native:fileuri_native",
+  ]
+
+  external_deps = [
+    "hilog:libhilog",
+    "ability_base:zuri",
+  ]
+}
+
+generate_static_abc("file_fileuri_taihe_abc") {
+  base_url = "$taihe_generated_file_path"
+  files = [ "$taihe_generated_file_path/@ohos.file.fileuri.ets" ]
+  is_boot_abc = "True"
+  device_dst_file = "/system/framework/file_fileuri_taihe_abc.abc"
+  dependencies = [ ":run_taihe" ]
+}
+
+generate_static_abc("file_fileuri_test") {
+  base_url = "${app_file_service_path}/interfaces/kits/taihe/fileuri/test"
+  files = [
+    "${app_file_service_path}/interfaces/kits/taihe/fileuri/test/test_main.ets",
+  ]
+  is_boot_abc = "True"
+  device_dst_file = "/system/framework/file_fileuri_test.abc"
+}
+
+ohos_prebuilt_etc("file_fileuri_etc") {
+  source = "$target_out_dir/file_fileuri_taihe_abc.abc"
+  module_install_dir = "framework"
+  part_name = "app_file_service"
+  subsystem_name = "filemanagement"
+  deps = [
+    ":file_fileuri_taihe_abc",
+  ]
+}
+
+group("afs_fileuri_taihe") {
+  deps = [
+    ":file_fileuri_taihe",
+    ":file_fileuri_etc",
+  ]
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/idl/ohos.file.fileuri.taihe b/interfaces/kits/taihe/fileuri/idl/ohos.file.fileuri.taihe
new file mode 100644
index 00000000..ba2fb92a
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/idl/ohos.file.fileuri.taihe
@@ -0,0 +1,16 @@
+@!namespace("@ohos.file.fileuri", "fileUri")
+
+@!sts_inject("""
+static { loadLibrary("file_fileuri_taihe.z"); }
+""")
+
+@class
+interface FileUri {
+    @get("name")
+    getName(): String;
+}
+
+@ctor("FileUri")
+function makeFileUri(name :String): FileUri;
+
+function getUriFromPath(path: String): String;
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/include/fileuri_taihe.h b/interfaces/kits/taihe/fileuri/include/fileuri_taihe.h
new file mode 100644
index 00000000..00838276
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/include/fileuri_taihe.h
@@ -0,0 +1,47 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef INTERFACES_KITS_TAIHE_INCLUDE_FILEURI_TAIHE_H
+#define INTERFACES_KITS_TAIHE_INCLUDE_FILEURI_TAIHE_H
+
+#include "ohos.file.fileuri.proj.hpp"
+#include "ohos.file.fileuri.impl.hpp"
+#include "taihe/runtime.hpp"
+#include "stdexcept"
+#include "file_uri.h"
+
+namespace ANI::fileUri {
+using namespace taihe;
+using namespace ohos::file::fileuri;
+
+class FileUriImpl {
+public:
+    FileUriImpl() = delete;
+
+    FileUriImpl(string_view name);
+
+    string getName();
+
+private: 
+    OHOS::Uri uri_;
+};
+
+FileUri makeFileUri(string_view name);
+
+string getUriFromPath(string_view path);
+
+}
+
+#endif // INTERFACES_KITS_TAIHE_INCLUDE_FILEURI_TAIHE_H
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/src/ani_constructor.cpp b/interfaces/kits/taihe/fileuri/src/ani_constructor.cpp
new file mode 100644
index 00000000..ccd336fb
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/src/ani_constructor.cpp
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "ohos.file.fileuri.ani.hpp"
+ANI_EXPORT ani_status ANI_Constructor(ani_vm *vm, uint32_t *result) {
+    ani_env *env;
+    if (ANI_OK != vm->GetEnv(ANI_VERSION_1, &env)) {
+        return ANI_ERROR;
+    }
+    if (ANI_OK != ohos::file::fileuri::ANIRegister(env)) {
+        std::cerr << "Error from ohos::file::fileuri::ANIRegister" << std::endl;
+        return ANI_ERROR;
+    }
+    *result = ANI_VERSION_1;
+    return ANI_OK;
+}
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/src/fileuri_taihe.cpp b/interfaces/kits/taihe/fileuri/src/fileuri_taihe.cpp
new file mode 100644
index 00000000..a5bd49aa
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/src/fileuri_taihe.cpp
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "fileuri_taihe.h"
+
+#include "common_func.h"
+#include "sandbox_helper.h"
+
+using namespace ANI::fileUri;
+
+namespace ANI::fileUri {
+
+const std::string FILE_SCHEME_PREFIX_TAIHE = "file://";
+
+FileUriImpl::FileUriImpl(string_view name) 
+: uri_((std::string(name.c_str()).find(FILE_SCHEME_PREFIX_TAIHE) == 0) ? std::string(name.c_str())
+: OHOS::AppFileService::CommonFunc::GetUriFromPath(std::string(name.c_str())))
+{
+
+}
+
+string FileUriImpl::getName() {
+std::string sandboxPath = OHOS::AppFileService::SandboxHelper::Decode(uri_.GetPath());
+    size_t posLast = sandboxPath.find_last_of("/");
+    if (posLast == std::string::npos) {
+        return "";
+    }
+    
+    if (posLast == (sandboxPath.size() - 1)) {
+        return "";
+    }
+    
+    return sandboxPath.substr(posLast + 1);
+
+}
+
+
+FileUri makeFileUri(string_view name) {
+    return make_holder<FileUriImpl, FileUri>(name);
+}
+
+string getUriFromPath(string_view path) {
+    const std::string strPath = path.c_str();
+    std::string uri = OHOS::AppFileService::CommonFunc::GetUriFromPath(strPath);
+
+    return uri;
+}
+}  // namespace ANI::fileUri
+
+TH_EXPORT_CPP_API_makeFileUri(makeFileUri);
+TH_EXPORT_CPP_API_getUriFromPath(getUriFromPath);
\ No newline at end of file
diff --git a/interfaces/kits/taihe/fileuri/test/test_main.ets b/interfaces/kits/taihe/fileuri/test/test_main.ets
new file mode 100644
index 00000000..09bd1ee9
--- /dev/null
+++ b/interfaces/kits/taihe/fileuri/test/test_main.ets
@@ -0,0 +1,38 @@
+import fileUri from '@ohos.file.fileuri';
+
+function main()
+{
+    test_GetUriFromPath_000();
+    test_GetUriFromPath_001();
+}
+
+function test_GetUriFromPath_000()
+{
+    try {
+      let path = "/data/storage/el2/base/haps/entry/files/sync.jpg";
+      let uri = fileUri.getUriFromPath(path);
+      let result = "file:///data/storage/el2/base/haps/entry/files/sync.jpg"
+      console.log("test_GetUriFromPath_000 uri:" + uri);
+      console.log("test_GetUriFromPath_000 result:" + result);
+      if (uri == result) {
+        console.log("test_GetUriFromPath_001 SUCCESS");
+      }
+    } catch (err) {
+      console.log('test_FileUri_GetUriFromPath_000 has failed for ' + err);
+    }
+}
+
+function test_GetUriFromPath_001()
+{
+    try {
+      let uri = fileUri.getUriFromPath("");
+      let result = "file://";
+      console.log("test__GetUriFromPath_001 uri:" + uri);
+      console.log("test__GetUriFromPath_001 result:" + result);
+      if (uri == result) {
+        console.log("test_GetUriFromPath_001 SUCCESS");
+      }
+    } catch (err) {
+      console.log('test_GetUriFromPath_001 FAILED: ' + err);
+    }
+}
\ No newline at end of file
